{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DataBase-Controller To Be Used With . . . SQLAlchemy and Databases PyMongo and Motor C.U.D (Operations) create - Create a new instance. update - Update instance(s) by ID . delete - Delete instance(s) by ID . Read (Operations) detail - Read single instance by ID . find_one - Read single instance. find - Read multiple instances.","title":"Home"},{"location":"#welcome-to-database-controller","text":"","title":"Welcome to DataBase-Controller"},{"location":"#to-be-used-with","text":"SQLAlchemy and Databases PyMongo and Motor","title":"To Be Used With . . ."},{"location":"#cud-operations","text":"create - Create a new instance. update - Update instance(s) by ID . delete - Delete instance(s) by ID .","title":"C.U.D (Operations)"},{"location":"#read-operations","text":"detail - Read single instance by ID . find_one - Read single instance. find - Read multiple instances.","title":"Read (Operations)"},{"location":"id-decoder/","text":"ID-Decoder table . id_decode ( 'ID-Base64-Encoded' )","title":"ID-Decode"},{"location":"id-decoder/#id-decoder","text":"table . id_decode ( 'ID-Base64-Encoded' )","title":"ID-Decoder"},{"location":"mongo/","text":"Mongo (Motor) Mongo Setup import motor.motor_asyncio # URL MONGO_URL = \"mongodb://localhost:27017\" # Setup MONGO_DB = motor . motor_asyncio . AsyncIOMotorClient ( MONGO_URL ) Mongo + Controller from dbcontroller import Mongo mongodb = Mongo ( MONGO_DB ) manager = mongodb ( \"test_databases\" ) Manager | Table | Collection table = manager ( \"test_collection\" ) C.R.U.D Create Update Delete Detail (Read) Find-One (Read) Find (Read) form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ]) results = await table . detail ( \"Some-ID\" ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find_one ( query ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find ( query , page = 1 , limit = 100 )","title":"Mongo"},{"location":"mongo/#mongo-motor","text":"","title":"Mongo (Motor)"},{"location":"mongo/#mongo-setup","text":"import motor.motor_asyncio # URL MONGO_URL = \"mongodb://localhost:27017\" # Setup MONGO_DB = motor . motor_asyncio . AsyncIOMotorClient ( MONGO_URL )","title":"Mongo Setup"},{"location":"mongo/#mongo-controller","text":"from dbcontroller import Mongo mongodb = Mongo ( MONGO_DB ) manager = mongodb ( \"test_databases\" )","title":"Mongo + Controller"},{"location":"mongo/#manager-table-collection","text":"table = manager ( \"test_collection\" )","title":"Manager | Table | Collection"},{"location":"mongo/#crud","text":"Create Update Delete Detail (Read) Find-One (Read) Find (Read) form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ]) results = await table . detail ( \"Some-ID\" ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find_one ( query ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find ( query , page = 1 , limit = 100 )","title":"C.R.U.D"},{"location":"sql-search/","text":"SQL Search ( Operator ) Example: First-Name or Last-Name Contains Joe search_cols = [ \"first_name\" , \"last_name\" ] search_text = \"Joe\" query = table . search ( search_cols , search_text )","title":"SQL-Search"},{"location":"sql-search/#sql-search-operator","text":"","title":"SQL Search ( Operator )"},{"location":"sql-search/#example","text":"First-Name or Last-Name Contains Joe search_cols = [ \"first_name\" , \"last_name\" ] search_text = \"Joe\" query = table . search ( search_cols , search_text )","title":"Example:"},{"location":"sql-where/","text":"SQL Where ( Operators ) eq - equals ne - not equals lt - less than le - less than or equal to gt - greater than ge - greater than or equal to contains - text contains \"string-to-search\" like - SQL like operator ilike - SQL ignore-case like operator in - value in list bt - between (x, y) table . where ( \"column\" , \"operator\" , \"value\" ) You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \" Example: # Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" )","title":"SQL-Where"},{"location":"sql-where/#sql-where-operators","text":"eq - equals ne - not equals lt - less than le - less than or equal to gt - greater than ge - greater than or equal to contains - text contains \"string-to-search\" like - SQL like operator ilike - SQL ignore-case like operator in - value in list bt - between (x, y) table . where ( \"column\" , \"operator\" , \"value\" ) You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \"","title":"SQL Where ( Operators )"},{"location":"sql-where/#example","text":"# Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" )","title":"Example:"},{"location":"sql/","text":"SQL (Alchemy) Sqlalchemy Setup from sqlalchemy.orm import sessionmaker from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Setup engine = create_engine ( DATABASE_URL , echo = True ) # Create-Tables Base . metadata . create_all ( engine ) Databases + Controller from databases import Database from dbcontroller import Sql database = Database ( DATABASE_URL ) manager = Sql ( database ) Table | Model from sqlalchemy import Column , Integer , String class User ( Base ): __tablename__ = 'User' id = Column ( Integer , primary_key = True ) name = Column ( String ( 80 )) Manager table = manager ( User ) C.R.U.D Create Update Delete Detail (Read) Find-One (Read) Find (Read) form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ]) results = await table . detail ( \"Some-ID\" ) query = table . where ( \"id\" , \"eq\" , 1 ) results = await table . find_one ( query ) query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" )) results = await table . find ( query , page = 1 , limit = 100 )","title":"SQL"},{"location":"sql/#sql-alchemy","text":"","title":"SQL (Alchemy)"},{"location":"sql/#sqlalchemy-setup","text":"from sqlalchemy.orm import sessionmaker from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Setup engine = create_engine ( DATABASE_URL , echo = True ) # Create-Tables Base . metadata . create_all ( engine )","title":"Sqlalchemy Setup"},{"location":"sql/#databases-controller","text":"from databases import Database from dbcontroller import Sql database = Database ( DATABASE_URL ) manager = Sql ( database )","title":"Databases + Controller"},{"location":"sql/#table-model","text":"from sqlalchemy import Column , Integer , String class User ( Base ): __tablename__ = 'User' id = Column ( Integer , primary_key = True ) name = Column ( String ( 80 ))","title":"Table | Model"},{"location":"sql/#manager","text":"table = manager ( User )","title":"Manager"},{"location":"sql/#crud","text":"Create Update Delete Detail (Read) Find-One (Read) Find (Read) form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ]) results = await table . detail ( \"Some-ID\" ) query = table . where ( \"id\" , \"eq\" , 1 ) results = await table . find_one ( query ) query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" )) results = await table . find ( query , page = 1 , limit = 100 )","title":"C.R.U.D"}]}