{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DataBase-Controller (DBC)","text":"<p>C.R.U.D \u2014 Operations for Mongo and SQL. Designed to work with <code>Fastberry</code>. But at the same time you can use the \"database-controller\" by itself as a Standalone tool.</p> <pre><code>graph LR;\n    A{SQL} --&gt; C;\n    B{Mongo} --&gt; C[Databases Controller];\n    C --&gt; D{Types};</code></pre>"},{"location":"#built-with","title":"Built With:","text":"Core Tool <code>SQLAlchemy</code> <code>Databases</code> <code>PyMongo</code> <code>Motor</code>"},{"location":"#cud-methods","title":"C.U.D Methods","text":"Method Is Used To... Variables <code>create</code> Create Single/Multiple Records. <code>(dict or list[dict])</code> <code>update</code> Edit Single/Multiple Records. <code>(list[ID], dict)</code> <code>delete</code> Delete Single/Multiple Records. <code>(list[ID])</code>"},{"location":"#read-multiple-records-methods","title":"Read (Multiple-Records) Methods","text":"Method Is Used To... Variables <code>all</code> All Rows (Multiple-Records) <code>N/A</code> <code>find</code> Custom-Querying (Multiple-Records) <code>(query, page=1, limit=100, sort_by='-id')</code> <code>filter_by</code> Filter-By Columns (Multiple-Records) <code>(dict, page=1, etc... )</code> <code>search</code> Search in Columns (Multiple-Records) <code>(list[str(column)], value, page=1, etc...)</code>"},{"location":"#read-one-record-methods","title":"Read (One-Record) Methods","text":"Method Is Used To... Variables <code>get_by</code> Filter-By Columns (Single-Record) <code>(**kwargs)</code> <code>detail</code> Get Details by Encoded-ID (Single-Record) <code>(Encoded_ID)</code> <code>find_one</code> Custom-Querying (Single-Records) <code>(query)</code>"},{"location":"#util-methods","title":"Util Methods","text":"Method Is Used To... Variables <code>id_decode</code> Decode Encoded-ID <code>(str)</code> <code>query_list</code> Transform a <code>List</code> into a Query <code>list</code> <code>Q</code> Custom-Querying for SQLAlchemy Tables <code>N/A</code>"},{"location":"#database-type-model-setup","title":"Database Type | Model Setup","text":"Key Description <code>table_name</code> (<code>str</code>) \u2014 Custom Table Name for the database <code>primary_key</code> (<code>list[str]</code>) \u2014 Columns that are consider Primary Key <code>required</code> (<code>list[str]</code>) \u2014 Columns that Required an input <code>index</code> (<code>list[str]</code>) \u2014 Columns that are Index <code>unique</code> (<code>list[str]</code>) \u2014 Columns that are Unique <code>unique_together</code> (<code>list[tuple]</code>) \u2014 Group of Columns that are Unique Together <code>ignore</code> (<code>list[str]</code>) \u2014 Columns that are Virtual and not part of the database columns"},{"location":"#usage-example","title":"Usage Example","text":"<p>These configurations are for SQL-Database (ONLY)</p> model-sample.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Model-Setup-Sample\n\"\"\"\nimport dbcontroller as dbc\n# Model\nsql = dbc.Controller(sql=\"sqlite:///example.db\")\n@sql.model(\ntable_name=\"custom_table_name\",\nprimary_key=[\"col_one\"],\nrequired=[\"col_one\"],\nindex=[\"col_one\"],\nunique=[\"col_one\"],\nunique_together=[(\"col_one\", \"col_two\")],\nignore=[\"col_three\"],\n)\nclass Product:\nname: str\n</code></pre>"},{"location":"notebook/","title":"Notebook (DBC)","text":""},{"location":"notebook/#pip-install","title":"PIP Install","text":"<p>Install</p> <pre><code>python -m pip install notebook \"dbcontroller[testing]\"\n</code></pre> <p>Run</p> <pre><code>python -m jupyter notebook\n</code></pre>"},{"location":"notebook/#pdm-install","title":"PDM Install","text":"<p>Install</p> <pre><code>pdm add notebook \"dbcontroller[testing]\"\n</code></pre> <p>Run</p> <pre><code>pdm run jupyter notebook\n</code></pre>"},{"location":"notebook/#initialize","title":"Initialize","text":"<pre><code>import dbcontroller as dbc\nsql = dbc.Controller(sql=\"sqlite:///example.db\")\n</code></pre>"},{"location":"notebook/#database-controller","title":"Database Controller","text":"<pre><code>@sql.model(table_name=\"users\")\nclass User:\nname: str\nnotes: dbc.text\nmeta: dbc.json\ndisabled: bool = False\n</code></pre>"},{"location":"notebook/#load-classes-manager","title":"Load Classes (Manager)","text":"<pre><code># Init Objects\ndbc.load([User])\n</code></pre>"},{"location":"notebook/#sqlalchemy","title":"SQLAlchemy","text":"<pre><code>from sqlalchemy import create_engine\n# Init Table (SQLAlchemy)\nengine = create_engine(sql.url, echo=True)\nsql.base.metadata.create_all(engine)\n</code></pre>"},{"location":"notebook/#demo","title":"Demo","text":""},{"location":"notebook/#create","title":"Create","text":"<pre><code>await User.create([{\"name\": \"joe doe\"}, {\"name\": \"jane doll\"}])\n</code></pre>"},{"location":"notebook/#get-all","title":"Get-All","text":"<pre><code>await User.all()\n</code></pre>"},{"location":"scalars/","title":"Scalars/Fields/Columns","text":"<p>Fields that translate from a particular type between <code>Python</code> , <code>SQL</code> and <code>GraphQL</code> data.</p>"},{"location":"scalars/#model-fields","title":"Model Fields","text":"GraphQL Python (dbcontroller) SQLAlchemy <code>ID</code> <code>dbcontroller.ID</code> Integer <code>String</code> <code>str</code> String(length=255) <code>String</code> <code>dbcontroller.text</code> Text <code>Integer</code> <code>int</code> Integer <code>Float</code> <code>float</code> Float <code>Boolean</code> <code>bool</code> Boolean <code>Datetime</code> <code>datetime.datetime</code> DateTime <code>Date</code> <code>datetime.date</code> Date <code>Time</code> <code>datetime.time</code> Time <code>Decimal</code> <code>dbcontroller.decimal</code> String(length=255) <code>JSON</code> <code>dbcontroller.json</code> JSON"},{"location":"scalars/#your-instance-includes-two-fields","title":"Your instance includes two fields","text":"<ol> <li><code>_id</code> : (str) Meant to be the original <code>Database</code> unique identifier.</li> <li><code>id</code> : (str) Meant to be the client's <code>GraphQL</code> unique identifier.</li> </ol>"},{"location":"scalars/#usage-example","title":"Usage Example","text":""},{"location":"scalars/#step-1","title":"Step 1","text":"Basic Tools<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Type | Model\n\"\"\"\nimport dbcontroller as dbc\nfrom typing import Optional\nsql   = dbc.Controller(sql=\"sqlite:///example.db\")\nmongo = dbc.Controller(mongo=\"mongodb://localhost:27017/example\")\n# DateTime Functions\nclass Date:\ndatetime = lambda: datetime.datetime.now()\ndate = lambda: datetime.date.today()\ntime = lambda: datetime.datetime.now().time()\n</code></pre>"},{"location":"scalars/#step-2","title":"Step 2","text":"Create Model(s)<pre><code>@sql.model\nclass Product:\n# Core { Python }\nname: str | None = None\naliases: list[str] | None = None\nstock: int | None = None\nis_available: bool | None = None\n# Custom Scalars { GraphQL }\ncreated_on: dbc.datetime = dbc.field(Date.datetime)\navailable_from: dbc.date = dbc.field(Date.date)\nsame_day_shipping_before: dbc.time = dbc.field(Date.time)\nprice: dbc.decimal | None = None\nnotes: list[dbc.text] = dbc.field(list)\nis_object: dbc.json = dbc.field(dict)\n# Other { Type | Model }\ncategory: Optional[\"Category\"] = None\n# Other { Type | Model }\nasync def group(self) -&gt; Optional[\"Group\"]:\n\"\"\"Group Type\"\"\"\nreturn Group(name=\"awesome\")\n@sql.model\nclass Category:\nname: str\n@mongo.model\nclass Group:\nname: str\n</code></pre>"},{"location":"scalars/#step-3-sql-only","title":"Step 3 (SQL Only)","text":"Create Database's Table<pre><code>from sqlalchemy import create_engine\nengine = create_engine(sql.url, echo=True)\nsql.base.metadata.create_all(engine)\n</code></pre>"},{"location":"database/manager/","title":"Manager","text":"<p>Usage</p> <p>The Manager is the interface for creating database <code>operations</code>. It gives <code>functionality</code> at the \u201cTable - Level\u201d.</p>"},{"location":"database/manager/#setup","title":"Setup","text":"<p>Create the <code>Model/Type</code> aka: Database \"<code>Table</code>\"</p> types.py<pre><code>import dbcontroller as dbc\nsql = dbc.Controller(sql=\"sqlite:///example.db\")\n@sql.model\nclass User:\nname: str\n</code></pre> <p>Create the <code>Manager</code></p> manager.py<pre><code>import dbcontroller as dbc\nfrom . import types\n# (Reusable) \u2014 Base Manager\nclass Base:\n@classmethod\nasync def all(cls):\nreturn await cls.objects.all()\n@classmethod\nasync def reset_table(cls):\nreturn await cls.objects.delete(None, all=True)\n# (Model | Type) \u2014 Manager\n@dbc.manager\nclass User(Base):\nmodel = types.User\n@classmethod\nasync def create(cls, form):\nresults = await cls.objects.create(\n{\n\"name\": form.name,\n}\n)\nreturn results\n</code></pre>"},{"location":"database/manager/#testing-usage","title":"Testing (Usage)","text":"<p>Test the <code>Manager</code></p> example.py<pre><code>from .manager import User\nawait User.reset_table()\n</code></pre>"},{"location":"database/mongo/","title":"SQL (Alchemy)","text":"<p>Type</p> <p><code>Database Collection</code> = <code>GraphQL Type</code></p>"},{"location":"database/mongo/#collection-model-type","title":"Collection | Model | Type","text":"<pre><code>import dbcontroller as dbc\nmongo = dbc.Controller(mongo=\"mongodb://localhost:27017/example\")\n# Types\n@mongo.model\nclass User:\nname: str\nnotes: dbc.text\nmeta: dbc.json\ndisabled: bool = False\n</code></pre>"},{"location":"database/mongo/#manager","title":"Manager","text":"<pre><code>table = User.objects\n</code></pre>"},{"location":"database/mongo/#cud-examples","title":"C.U.D \u2014 Examples","text":"CreateUpdateDelete <pre><code>form = {\n\"name\": \"joe doe\",\n}\n# Create One\nresults = await table.create(form)\n# Create Many\nresults = await table.create([{\"name\": \"joe doe\"}, {\"name\": \"jane doll\"}])\n</code></pre> <pre><code>selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"]\nform = {\n\"name\": \"jane doll\",\n}\n# Update One or Many\nresults = await table.update(selector, form)\n</code></pre> <pre><code># Delete One\nresults = await table.delete(\"Encoded-ID\")\n# Delete Many\nresults = await table.delete([\"Encoded-ID-1\", \"Encoded-ID-2\", \"More-IDS...\"])\n</code></pre>"},{"location":"database/mongo/#reading-querying-one-record","title":"Reading | Querying (One-Record)","text":"DetailGet-ByFind-One <pre><code>results = await table.detail(\"Encoded-ID\")\n</code></pre> <pre><code>results = await table.get_by(id=1)\n</code></pre> <pre><code>query = {\"name\": {\"$regex\": \"joe\"}}\nresults = await table.find_one(query)\n</code></pre>"},{"location":"database/mongo/#reading-querying-multiple-records","title":"Reading | Querying (Multiple-Records)","text":"AllFindFilter-BySearch <pre><code>results = await table.all()\n</code></pre> <pre><code>query = {\"$or\": [\n{\"name\": {\"$regex\": \"joe\"}},\n{\"name\": {\"$regex\": \"jane\"}}\n]}\nresults = await table.find(query, page=1, limit=100, sort_by=\"-id\")\n</code></pre> <pre><code>query = {\"name\": \"joe doe\"}\nresults = await table.filter_by(search=query, page=1, limit=100, sort_by=\"-id\")\n</code></pre> <pre><code>search_value = \"j\"\ncolumns = [\"name\", \"notes\"]\nresults = await table.search(columns=columns, value=search_value, page=1, limit=100, sort_by=\"-id\")\n</code></pre>"},{"location":"database/sql/","title":"SQL (Alchemy)","text":"<p>Type</p> <p><code>Database Table</code> = <code>GraphQL Type</code></p>"},{"location":"database/sql/#table-model-type","title":"Table | Model | Type","text":"<pre><code>import dbcontroller as dbc\nsql = dbc.Controller(sql=\"sqlite:///example.db\")\n# Types\n@sql.model\nclass User:\nname: str\nnotes: dbc.text\nmeta: dbc.json\ndisabled: bool = False\n</code></pre>"},{"location":"database/sql/#manager","title":"Manager","text":"<pre><code>table = User.objects\n</code></pre>"},{"location":"database/sql/#cud-examples","title":"C.U.D \u2014 Examples","text":"CreateUpdateDelete <pre><code>form = {\n\"name\": \"joe doe\",\n}\n# Create One\nresults = await table.create(form)\n# Create Many\nresults = await table.create([{\"name\": \"joe doe\"}, {\"name\": \"jane doll\"}])\n</code></pre> <pre><code>selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"]\nform = {\n\"name\": \"jane doll\",\n}\n# Update One or Many\nresults = await table.update(selector, form)\n</code></pre> <pre><code># Delete One\nresults = await table.delete(\"Encoded-ID\")\n# Delete Many\nresults = await table.delete([\"Encoded-ID-1\", \"Encoded-ID-2\", \"More-IDS...\"])\n</code></pre>"},{"location":"database/sql/#reading-querying-one-record","title":"Reading | Querying (One-Record)","text":"DetailGet-ByFind-One <pre><code>results = await table.detail(\"Encoded-ID\")\n</code></pre> <pre><code>results = await table.get_by(id=1)\n</code></pre> <pre><code>query = table.where(\"name\", \"contains\", \"joe\")\nresults = await table.find_one(query)\n</code></pre>"},{"location":"database/sql/#reading-querying-multiple-records","title":"Reading | Querying (Multiple-Records)","text":"AllFindFilter-BySearch <pre><code>results = await table.all()\n</code></pre> <pre><code>query = (\ntable.where(\"name\", \"contains\", \"jane\")\n| table.where(\"name\", \"contains\", \"joe\")\n)\nresults = await table.find(query, page=1, limit=100, sort_by=\"-id\")\n</code></pre> <pre><code>query = {\"name\": \"joe doe\"}\nresults = await table.filter_by(search=query, page=1, limit=100, sort_by=\"-id\")\n</code></pre> <pre><code>search_value = \"j\"\ncolumns = [\"name\", \"notes\"]\nresults = await table.search(columns=columns, value=search_value, page=1, limit=100, sort_by=\"-id\")\n</code></pre>"},{"location":"extras/id-decoder/","title":"ID-Decoder","text":"<p>table</p> <p><code>table</code> is short for <code>Model.objects</code></p> <pre><code>table.id_decode('ID-Custom-Base64-Encoded')\n</code></pre>"},{"location":"extras/load/","title":"Load","text":"<p>Load</p> <p>The <code>Load</code> method. Is to initiate the <code>objects</code>.</p> <p>By default the objects do not get initialized. The reason being that if you have (2) two tables that connect with each other. The reference can break if both of them are not initialized.</p> <p>Therefore, we want to initiate them all at the same time.</p> <pre><code>dbcontroller.load([ ModelOne, ModelTwo ])\n</code></pre>"},{"location":"extras/sql-q/","title":"SQL ( Q )","text":"<p>table</p> <p><code>table</code> is short for <code>Model.objects</code></p>"},{"location":"extras/sql-q/#methods","title":"Methods","text":"<p>Querying</p> <p>Simplified SQL Querying</p>"},{"location":"extras/sql-q/#where","title":"Where","text":"<pre><code>table.Q.where(\"id\", \"in\", [1, 2, 3])\n</code></pre>"},{"location":"extras/sql-q/#filter-by","title":"Filter-By","text":"<p><code>WHERE id = 1 AND name = \"spongebob\" AND last_name = \"squarepants\"</code></p> <pre><code>table.Q.filter_by(id=1, name=\"spongebob\", last_name=\"squarepants\")\n</code></pre>"},{"location":"extras/sql-q/#search","title":"Search","text":"<p><code>WHERE name = \"bob\" OR name = \"bob\"</code></p> <pre><code>table.Q.search([\"name\", \"nickname\"], \"bob\")\n</code></pre>"},{"location":"extras/sql-q/#compile","title":"Compile","text":"<p>Compiling</p> <p>Compiling the Query.</p>"},{"location":"extras/sql-q/#normal-select","title":"Normal (Select)","text":"<pre><code># Query\nquery = table.Q.search([\"name\", \"title\"], \"bob\")\n# Compile\ntable.Q.select(query)\n</code></pre>"},{"location":"extras/sql-q/#pagination-find","title":"Pagination (Find)","text":"<pre><code># Query\nquery = table.Q.filter_by(name=\"bob\")\n# Compile\ntable.Q.find(\nquery,          # The Query\npage    = 1,    # Current Page\nlimit   = 100,  # Items Per Page\nsort_by = '-id' # Sort-By \"X\" Column\n)\n</code></pre>"},{"location":"query-list/","title":"Query List","text":"<p>For simple queries you can use a \"Query <code>List</code>\"</p> <pre><code>table.query_list([\n[\"status\", \"eq\", \"open\"],\n\"or\",\n[\"status\", \"eq\", \"close\"],\n])\n</code></pre>"},{"location":"query-list/#generic-operations","title":"Generic Operations","text":"Method Check Column (IF) <code>eq</code> Equals <code>lt</code> Less than <code>le</code> Less than or Equal than <code>gt</code> Greater than <code>ge</code> Greater than or Equal than <code>in</code> In List <code>bt</code> Between \"A &amp; B\" <code>contains</code> Custom Text Search (Ignore-Case)"},{"location":"query-list/#sql-only-operations","title":"SQL (Only) Operations","text":"Method Check Column (IF) <code>like</code> Text Search \"%\" (Case-Sensitive) <code>ilike</code> Text Search \"%\" (Ignore-Case)"},{"location":"query-list/#mongo-only-operations","title":"Mongo (Only) Operations","text":"Method Check Column (IF) <code>regex</code> Text Search \"regex\" (Case-Sensitive) <code>iregex</code> Text Search \"regex\" (Ignore-Case)"},{"location":"query-list/mongo-where/","title":"Mongo Where ( Operators )","text":"<p>table</p> <p><code>table</code> is short for <code>Model.objects</code></p> <p>Usage: <code>table.where(str: \"column\", str: \"method\", Any: value)</code></p> Method Check Column (IF) <code>eq</code> Equals <code>lt</code> Less than <code>le</code> Less than or Equal than <code>gt</code> Greater than <code>ge</code> Greater than or Equal than <code>contains</code> Custom Text Search (Ignore-Case) <code>regex</code> Text Search \"regex\" (Case-Sensitive) <code>iregex</code> Text Search \"regex\" (Ignore-Case) <code>in</code> In List <code>bt</code> Between \"A &amp; B\""},{"location":"query-list/mongo-where/#api-demo","title":"API - Demo","text":"<pre><code>table.where(\"column\", \"operator\", \"value\")\n</code></pre>"},{"location":"query-list/mongo-where/#example","title":"Example","text":"<p>You can add an exclamation point \"<code>!</code>\" at the beginning of the operator to make it a \"<code>not</code>\"</p> <pre><code># Name Equals Joe\ntable.where(\"name\", \"eq\", \"joe\")\n# Name Not Equals Joe\ntable.where(\"name\", \"!eq\", \"joe\")\n</code></pre>"},{"location":"query-list/sql-where/","title":"SQL Where ( Operators )","text":"<p>table</p> <p><code>table</code> is short for <code>Model.objects</code></p> <p>Usage: <code>table.where(str: \"column\", str: \"method\", Any: value)</code></p> Method Check Column (IF) <code>eq</code> Equals <code>lt</code> Less than <code>le</code> Less than or Equal than <code>gt</code> Greater than <code>ge</code> Greater than or Equal than <code>contains</code> Custom Text Search (Ignore-Case) <code>like</code> Text Search \"%\" (Case-Sensitive) <code>ilike</code> Text Search \"%\" (Ignore-Case) <code>in</code> In List <code>bt</code> Between \"A &amp; B\""},{"location":"query-list/sql-where/#api-demo","title":"API - Demo","text":"<pre><code>table.where(\"column\", \"operator\", \"value\")\n</code></pre>"},{"location":"query-list/sql-where/#example","title":"Example","text":"<p>You can add an exclamation point \"<code>!</code>\" at the beginning of the operator to make it a \"<code>not</code>\"</p> <pre><code># Name Equals Joe\ntable.where(\"name\", \"eq\", \"joe\")\n# Name Not Equals Joe\ntable.where(\"name\", \"!eq\", \"joe\")\n</code></pre>"},{"location":"query-list/sql-where/#sqlalchemy-style","title":"SQLAlchemy Style","text":"<p>You can use just the regular SQLAlchemy operators instead.</p> <pre><code># Name Equals Joe\ntable.c.name == \"joe\"\n</code></pre>"}]}