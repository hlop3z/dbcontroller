{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DataBase-Controller (DBC) C.R.U.D \u2014 Operations for Mongo and SQL . Designed to work with Fastberry . But at the same time you can use the \"database-controller\" by itself as a Standalone tool. graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types}; Built With: Core Tool SQLAlchemy Databases PyMongo Motor C.U.D Methods Method Is Used To... Variables create Create Single/Multiple Records. (dict or list[dict]) update Edit Single/Multiple Records. (list[ID], dict) delete Delete Single/Multiple Records. (list[ID]) Read (Multiple-Records) Methods Method Is Used To... Variables all All Rows ( Multiple -Records) N/A find Custom-Querying ( Multiple -Records) (query, page=1, limit=100, sort_by='-id') filter_by Filter-By Columns ( Multiple -Records) (dict, page=1, etc... ) search Search in Columns ( Multiple -Records) (list[str(column)], value, page=1, etc...) Read (One-Record) Methods Method Is Used To... Variables get_by Filter-By Columns ( Single -Record) (**kwargs) detail Get Details by Encoded-ID ( Single -Record) (Encoded_ID) find_one Custom-Querying ( Single -Records) (query) Util Methods Method Is Used To... Variables form Clean User's Inputs . And, only allows fields that are in the DataBase. (dict) form_update Clean User's Inputs . And, only allows fields that are in the DataBase. (dict) id_decode Decode Encoded-ID (str) Q Custom-Querying for SQLAlchemy Tables N/A Database Type | Model Setup Key Description table_name ( str ) \u2014 Custom Table Name for the database primary_key ( list[str] ) \u2014 Columns that are consider Primary Key required ( list[str] ) \u2014 Columns that Required User's input index ( list[str] ) \u2014 Columns that are Index unique ( list[str] ) \u2014 Columns that are Unique unique_together ( list[tuple] ) \u2014 Group of Columns that are Unique Together ignore ( list[str] ) \u2014 Columns that are Virtual and not part of the database columns Usage Example The configurations are for the SQL-Database (ONLY) to configure the Model / Type just use regular Typing annotations. Or Mongo for Mongo-Database Typing model-sample.py # -*- coding: utf-8 -*- \"\"\" Model-Setup-Sample \"\"\" import dbcontroller as dbc # Model model = dbc . Model () @model . sql ( table_name = \"custom_table_name\" , primary_key = [ \"col_one\" ], required = [ \"col_one\" ], index = [ \"col_one\" ], unique = [ \"col_one\" ], unique_together = [( \"col_one\" , \"col_two\" )], many_to_many = [ \"col_one\" ], ignore = [ \"col_three\" ], ) class Product : name : str","title":"Introduction"},{"location":"#welcome-to-database-controller-dbc","text":"C.R.U.D \u2014 Operations for Mongo and SQL . Designed to work with Fastberry . But at the same time you can use the \"database-controller\" by itself as a Standalone tool. graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types};","title":"Welcome to DataBase-Controller (DBC)"},{"location":"#built-with","text":"Core Tool SQLAlchemy Databases PyMongo Motor","title":"Built With:"},{"location":"#cud-methods","text":"Method Is Used To... Variables create Create Single/Multiple Records. (dict or list[dict]) update Edit Single/Multiple Records. (list[ID], dict) delete Delete Single/Multiple Records. (list[ID])","title":"C.U.D Methods"},{"location":"#read-multiple-records-methods","text":"Method Is Used To... Variables all All Rows ( Multiple -Records) N/A find Custom-Querying ( Multiple -Records) (query, page=1, limit=100, sort_by='-id') filter_by Filter-By Columns ( Multiple -Records) (dict, page=1, etc... ) search Search in Columns ( Multiple -Records) (list[str(column)], value, page=1, etc...)","title":"Read (Multiple-Records) Methods"},{"location":"#read-one-record-methods","text":"Method Is Used To... Variables get_by Filter-By Columns ( Single -Record) (**kwargs) detail Get Details by Encoded-ID ( Single -Record) (Encoded_ID) find_one Custom-Querying ( Single -Records) (query)","title":"Read (One-Record) Methods"},{"location":"#util-methods","text":"Method Is Used To... Variables form Clean User's Inputs . And, only allows fields that are in the DataBase. (dict) form_update Clean User's Inputs . And, only allows fields that are in the DataBase. (dict) id_decode Decode Encoded-ID (str) Q Custom-Querying for SQLAlchemy Tables N/A","title":"Util Methods"},{"location":"#database-type-model-setup","text":"Key Description table_name ( str ) \u2014 Custom Table Name for the database primary_key ( list[str] ) \u2014 Columns that are consider Primary Key required ( list[str] ) \u2014 Columns that Required User's input index ( list[str] ) \u2014 Columns that are Index unique ( list[str] ) \u2014 Columns that are Unique unique_together ( list[tuple] ) \u2014 Group of Columns that are Unique Together ignore ( list[str] ) \u2014 Columns that are Virtual and not part of the database columns","title":"Database Type | Model Setup"},{"location":"#usage-example","text":"The configurations are for the SQL-Database (ONLY) to configure the Model / Type just use regular Typing annotations. Or Mongo for Mongo-Database Typing model-sample.py # -*- coding: utf-8 -*- \"\"\" Model-Setup-Sample \"\"\" import dbcontroller as dbc # Model model = dbc . Model () @model . sql ( table_name = \"custom_table_name\" , primary_key = [ \"col_one\" ], required = [ \"col_one\" ], index = [ \"col_one\" ], unique = [ \"col_one\" ], unique_together = [( \"col_one\" , \"col_two\" )], many_to_many = [ \"col_one\" ], ignore = [ \"col_three\" ], ) class Product : name : str","title":"Usage Example"},{"location":"forms/","text":"Forms Clean Form from unwanted inputs . Create - Form table . form ({ \"name\" : \"joe doe\" }) Update - Form table . form_update ({ \"name\" : \"joe doe\" })","title":"Forms"},{"location":"forms/#forms","text":"Clean Form from unwanted inputs .","title":"Forms"},{"location":"forms/#create-form","text":"table . form ({ \"name\" : \"joe doe\" })","title":"Create - Form"},{"location":"forms/#update-form","text":"table . form_update ({ \"name\" : \"joe doe\" })","title":"Update - Form"},{"location":"id-decoder/","text":"ID-Decoder table . id_decode ( 'ID-Base64-Encoded' )","title":"ID-Decode"},{"location":"id-decoder/#id-decoder","text":"table . id_decode ( 'ID-Base64-Encoded' )","title":"ID-Decoder"},{"location":"mongo/","text":"Mongo (Motor) Mongo Setup import motor.motor_asyncio # Config DATABASE_URL = \"mongodb://localhost:27017\" DATABASE_NAME = \"test_database\" # Engine ENGINE = motor . motor_asyncio . AsyncIOMotorClient ( DATABASE_URL ) # Base Base = ENGINE [ DATABASE_NAME ] Collection | Model (Motor + Controller) import dbcontroller as dbc model = dbc . Model ( mongo = Base ) # Types @model . sql class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False Manager table = dbc . Mongo ( User ) C.U.D \u2014 Examples Create Update Delete form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ]) Reading | Querying ( One -Record) Detail Get-By Find-One results = await table . detail ( \"Some-ID\" ) results = await table . get_by ( id = 1 ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find_one ( query ) Reading | Querying ( Multiple -Records) All Find Filter-By Search results = await table . all () search = [{ \"name\" : { \"$regex\" : \"joe\" }}, { \"name\" : { \"$regex\" : \"jane\" }}] query = { \"$or\" : search } results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Mongo"},{"location":"mongo/#mongo-motor","text":"","title":"Mongo (Motor)"},{"location":"mongo/#mongo-setup","text":"import motor.motor_asyncio # Config DATABASE_URL = \"mongodb://localhost:27017\" DATABASE_NAME = \"test_database\" # Engine ENGINE = motor . motor_asyncio . AsyncIOMotorClient ( DATABASE_URL ) # Base Base = ENGINE [ DATABASE_NAME ]","title":"Mongo Setup"},{"location":"mongo/#collection-model","text":"(Motor + Controller) import dbcontroller as dbc model = dbc . Model ( mongo = Base ) # Types @model . sql class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False","title":"Collection | Model"},{"location":"mongo/#manager","text":"table = dbc . Mongo ( User )","title":"Manager"},{"location":"mongo/#cud-examples","text":"Create Update Delete form = { \"id\" : None , \"name\" : \"Joe Doe\" , } results = await table . create ( form ) form = { \"id\" : \"Some-ID\" , # For multiple-ids: [\"Some-ID-1\", \"Some-ID-2\"] \"name\" : \"Jane Doll\" , } results = await table . update ( form ) # Delete One results = await table . delete ( \"Some-ID\" ) # Delete Many results = await table . delete ([ \"Some-ID-1\" , \"Some-ID-2\" ])","title":"C.U.D \u2014 Examples"},{"location":"mongo/#reading-querying-one-record","text":"Detail Get-By Find-One results = await table . detail ( \"Some-ID\" ) results = await table . get_by ( id = 1 ) query = { \"name\" : { \"$regex\" : \"Joe\" } } results = await table . find_one ( query )","title":"Reading | Querying (One-Record)"},{"location":"mongo/#reading-querying-multiple-records","text":"All Find Filter-By Search results = await table . all () search = [{ \"name\" : { \"$regex\" : \"joe\" }}, { \"name\" : { \"$regex\" : \"jane\" }}] query = { \"$or\" : search } results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Reading | Querying (Multiple-Records)"},{"location":"notebook/","text":"Notebook (DBC) PIP Install Install python -m pip install notebook \"dbcontroller[testing]\" Run python -m jupyter notebook PDM Install Install pdm add notebook \"dbcontroller[testing]\" Run pdm run jupyter notebook Initialize from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Demo Create Tables def create_tables (): engine = create_engine ( DATABASE_URL , echo = False ) Base . metadata . create_all ( engine ) \\ Database Controller import functools import dbcontroller as dbc model = dbc . Model ( sql = Base ) SQL = functools . partial ( dbc . SQL , DATABASE_URL ) @model . sql ( table_name = \"users\" ) class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False Manager # Connect \"Type\" to \"Controller\" table = SQL ( User ) # Create Table create_tables () Demo Create await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) Get-All await table . all ()","title":"(Demo) Notebook"},{"location":"notebook/#notebook-dbc","text":"","title":"Notebook (DBC)"},{"location":"notebook/#pip-install","text":"Install python -m pip install notebook \"dbcontroller[testing]\" Run python -m jupyter notebook","title":"PIP Install"},{"location":"notebook/#pdm-install","text":"Install pdm add notebook \"dbcontroller[testing]\" Run pdm run jupyter notebook","title":"PDM Install"},{"location":"notebook/#initialize","text":"from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Demo Create Tables def create_tables (): engine = create_engine ( DATABASE_URL , echo = False ) Base . metadata . create_all ( engine ) \\","title":"Initialize"},{"location":"notebook/#database-controller","text":"import functools import dbcontroller as dbc model = dbc . Model ( sql = Base ) SQL = functools . partial ( dbc . SQL , DATABASE_URL ) @model . sql ( table_name = \"users\" ) class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False","title":"Database Controller"},{"location":"notebook/#manager","text":"# Connect \"Type\" to \"Controller\" table = SQL ( User ) # Create Table create_tables ()","title":"Manager"},{"location":"notebook/#demo","text":"","title":"Demo"},{"location":"notebook/#create","text":"await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }])","title":"Create"},{"location":"notebook/#get-all","text":"await table . all ()","title":"Get-All"},{"location":"scalars/","text":"Fields that translate from a particular type between Python , SQL and GraphQL data. Model Fields GraphQL Python (dbcontroller) SQLAlchemy ID dbcontroller.ID Integer String str String(length=255) String dbcontroller.Text Text Integer int Integer Float float Float Boolean bool Boolean Datetime datetime.datetime DateTime Date datetime.date Date Time datetime.time Time Decimal decimal.Decimal Decimal JSON dbcontroller.JSON JSON Your instance includes two fields _id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier. Python Fields dbcontroller.ID str dbcontroller.Text int float bool datetime.datetime datetime.date datetime.time datetime.Decimal dbcontroller.JSON Usage Example Example - Part 1 # -*- coding: utf-8 -*- \"\"\" Types \"\"\" import functools from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base import dataclasses as dc import datetime import decimal import typing import dbcontroller as dbc # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Manager SQL = functools . partial ( dbc . SQL , DATABASE_URL ) # Model model = dbc . Model ( sql = Base ) # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time () # Create your <types> here. @model . sql class Product : name : str aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None created_on : datetime . datetime = dc . field ( default_factory = Date . datetime ) available_from : datetime . date = dc . field ( default_factory = Date . date ) same_day_shipping_before : datetime . time = dc . field ( default_factory = Date . time ) price : decimal . Decimal | None = None notes : list [ dbc . Text ] = dc . field ( default_factory = list ) is_object : dbc . JSON = dc . field ( default_factory = dict ) async def category ( self ) -> typing . Optional [ \"Category\" ]: return Category ( name = \"awesome\" ) @model . sql class Category : name : str Example - Part 2 # -*- coding: utf-8 -*- \"\"\" Manager \"\"\" # Regular Engine engine = create_engine ( DATABASE_URL , echo = True ) # Register Tables & Load -> Lazy-Loaded Tables (aka: Types) dbc . Admin . register ([ Product , Category ]) dbc . Admin . load () # Create Tables Base . metadata . create_all ( engine ) # Manage Tables ProductDB = SQL ( Product ) CategoryDB = SQL ( Category )","title":"Scalars/Fields/Columns"},{"location":"scalars/#model-fields","text":"GraphQL Python (dbcontroller) SQLAlchemy ID dbcontroller.ID Integer String str String(length=255) String dbcontroller.Text Text Integer int Integer Float float Float Boolean bool Boolean Datetime datetime.datetime DateTime Date datetime.date Date Time datetime.time Time Decimal decimal.Decimal Decimal JSON dbcontroller.JSON JSON","title":"Model Fields"},{"location":"scalars/#your-instance-includes-two-fields","text":"_id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier.","title":"Your instance includes two fields"},{"location":"scalars/#python-fields","text":"dbcontroller.ID str dbcontroller.Text int float bool datetime.datetime datetime.date datetime.time datetime.Decimal dbcontroller.JSON","title":"Python Fields"},{"location":"scalars/#usage-example","text":"Example - Part 1 # -*- coding: utf-8 -*- \"\"\" Types \"\"\" import functools from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base import dataclasses as dc import datetime import decimal import typing import dbcontroller as dbc # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () # Manager SQL = functools . partial ( dbc . SQL , DATABASE_URL ) # Model model = dbc . Model ( sql = Base ) # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time () # Create your <types> here. @model . sql class Product : name : str aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None created_on : datetime . datetime = dc . field ( default_factory = Date . datetime ) available_from : datetime . date = dc . field ( default_factory = Date . date ) same_day_shipping_before : datetime . time = dc . field ( default_factory = Date . time ) price : decimal . Decimal | None = None notes : list [ dbc . Text ] = dc . field ( default_factory = list ) is_object : dbc . JSON = dc . field ( default_factory = dict ) async def category ( self ) -> typing . Optional [ \"Category\" ]: return Category ( name = \"awesome\" ) @model . sql class Category : name : str Example - Part 2 # -*- coding: utf-8 -*- \"\"\" Manager \"\"\" # Regular Engine engine = create_engine ( DATABASE_URL , echo = True ) # Register Tables & Load -> Lazy-Loaded Tables (aka: Types) dbc . Admin . register ([ Product , Category ]) dbc . Admin . load () # Create Tables Base . metadata . create_all ( engine ) # Manage Tables ProductDB = SQL ( Product ) CategoryDB = SQL ( Category )","title":"Usage Example"},{"location":"sql-where/","text":"SQL Where ( Operators ) Usage : table.where(str: \"column\", str: \"method\", Any: value) Method Check Column (IF) eq Equals lt Less than le Less than or Equal than gt Greater than ge Greater than or Equal than contains Custom Text Search (Ignore-Case) like Text Search \"%\" (Case-Sensitive) ilike Text Search \"%\" (Ignore-Case) in In List bt Between \"A & B\" API - Demo table . where ( \"column\" , \"operator\" , \"value\" ) Example You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \" # Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" )","title":"SQL-Where"},{"location":"sql-where/#sql-where-operators","text":"Usage : table.where(str: \"column\", str: \"method\", Any: value) Method Check Column (IF) eq Equals lt Less than le Less than or Equal than gt Greater than ge Greater than or Equal than contains Custom Text Search (Ignore-Case) like Text Search \"%\" (Case-Sensitive) ilike Text Search \"%\" (Ignore-Case) in In List bt Between \"A & B\"","title":"SQL Where ( Operators )"},{"location":"sql-where/#api-demo","text":"table . where ( \"column\" , \"operator\" , \"value\" )","title":"API - Demo"},{"location":"sql-where/#example","text":"You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \" # Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" )","title":"Example"},{"location":"sql/","text":"SQL (Alchemy) SQLAlchemy Setup from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base () Table | Model (Databases + Controller) import dbcontroller as dbc import functools # Manager SQL = functools . partial ( dbc . SQL , DATABASE_URL ) # Model model = dbc . Model ( sql = Base ) # Types @model . sql class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False Manager table = SQL ( User ) C.U.D \u2014 Examples Create Update Delete form = { \"name\" : \"joe doe\" , } results = await table . create ( form ) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ]) Reading | Querying ( One -Record) Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query ) Reading | Querying ( Multiple -Records) All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"SQL"},{"location":"sql/#sql-alchemy","text":"","title":"SQL (Alchemy)"},{"location":"sql/#sqlalchemy-setup","text":"from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base # URL DATABASE_URL = \"sqlite:///example.db\" # Base Base = declarative_base ()","title":"SQLAlchemy Setup"},{"location":"sql/#table-model","text":"(Databases + Controller) import dbcontroller as dbc import functools # Manager SQL = functools . partial ( dbc . SQL , DATABASE_URL ) # Model model = dbc . Model ( sql = Base ) # Types @model . sql class User : name : str notes : dbc . Text meta : dbc . JSON disabled : bool = False","title":"Table | Model"},{"location":"sql/#manager","text":"table = SQL ( User )","title":"Manager"},{"location":"sql/#cud-examples","text":"Create Update Delete form = { \"name\" : \"joe doe\" , } results = await table . create ( form ) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ])","title":"C.U.D \u2014 Examples"},{"location":"sql/#reading-querying-one-record","text":"Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query )","title":"Reading | Querying (One-Record)"},{"location":"sql/#reading-querying-multiple-records","text":"All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Reading | Querying (Multiple-Records)"}]}