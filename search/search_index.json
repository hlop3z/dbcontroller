{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DataBase-Controller (DBC) C.R.U.D \u2014 Operations for Mongo and SQL . Designed to work with Fastberry . But at the same time you can use the \"database-controller\" by itself as a Standalone tool. graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types}; Built With: Core Tool SQLAlchemy Databases PyMongo Motor C.U.D Methods Method Is Used To... Variables create Create Single/Multiple Records. (dict or list[dict]) update Edit Single/Multiple Records. (list[ID], dict) delete Delete Single/Multiple Records. (list[ID]) Read (Multiple-Records) Methods Method Is Used To... Variables all All Rows ( Multiple -Records) N/A find Custom-Querying ( Multiple -Records) (query, page=1, limit=100, sort_by='-id') filter_by Filter-By Columns ( Multiple -Records) (dict, page=1, etc... ) search Search in Columns ( Multiple -Records) (list[str(column)], value, page=1, etc...) Read (One-Record) Methods Method Is Used To... Variables get_by Filter-By Columns ( Single -Record) (**kwargs) detail Get Details by Encoded-ID ( Single -Record) (Encoded_ID) find_one Custom-Querying ( Single -Records) (query) Util Methods Method Is Used To... Variables id_decode Decode Encoded-ID (str) Q Custom-Querying for SQLAlchemy Tables N/A Database Type | Model Setup Key Description table_name ( str ) \u2014 Custom Table Name for the database primary_key ( list[str] ) \u2014 Columns that are consider Primary Key required ( list[str] ) \u2014 Columns that Required an input index ( list[str] ) \u2014 Columns that are Index unique ( list[str] ) \u2014 Columns that are Unique unique_together ( list[tuple] ) \u2014 Group of Columns that are Unique Together ignore ( list[str] ) \u2014 Columns that are Virtual and not part of the database columns Usage Example These configurations are for SQL-Database (ONLY) model-sample.py # -*- coding: utf-8 -*- \"\"\" Model-Setup-Sample \"\"\" import dbcontroller as dbc # Model sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) @sql . model ( table_name = \"custom_table_name\" , primary_key = [ \"col_one\" ], required = [ \"col_one\" ], index = [ \"col_one\" ], unique = [ \"col_one\" ], unique_together = [( \"col_one\" , \"col_two\" )], ignore = [ \"col_three\" ], ) class Product : name : str","title":"Introduction"},{"location":"#welcome-to-database-controller-dbc","text":"C.R.U.D \u2014 Operations for Mongo and SQL . Designed to work with Fastberry . But at the same time you can use the \"database-controller\" by itself as a Standalone tool. graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types};","title":"Welcome to DataBase-Controller (DBC)"},{"location":"#built-with","text":"Core Tool SQLAlchemy Databases PyMongo Motor","title":"Built With:"},{"location":"#cud-methods","text":"Method Is Used To... Variables create Create Single/Multiple Records. (dict or list[dict]) update Edit Single/Multiple Records. (list[ID], dict) delete Delete Single/Multiple Records. (list[ID])","title":"C.U.D Methods"},{"location":"#read-multiple-records-methods","text":"Method Is Used To... Variables all All Rows ( Multiple -Records) N/A find Custom-Querying ( Multiple -Records) (query, page=1, limit=100, sort_by='-id') filter_by Filter-By Columns ( Multiple -Records) (dict, page=1, etc... ) search Search in Columns ( Multiple -Records) (list[str(column)], value, page=1, etc...)","title":"Read (Multiple-Records) Methods"},{"location":"#read-one-record-methods","text":"Method Is Used To... Variables get_by Filter-By Columns ( Single -Record) (**kwargs) detail Get Details by Encoded-ID ( Single -Record) (Encoded_ID) find_one Custom-Querying ( Single -Records) (query)","title":"Read (One-Record) Methods"},{"location":"#util-methods","text":"Method Is Used To... Variables id_decode Decode Encoded-ID (str) Q Custom-Querying for SQLAlchemy Tables N/A","title":"Util Methods"},{"location":"#database-type-model-setup","text":"Key Description table_name ( str ) \u2014 Custom Table Name for the database primary_key ( list[str] ) \u2014 Columns that are consider Primary Key required ( list[str] ) \u2014 Columns that Required an input index ( list[str] ) \u2014 Columns that are Index unique ( list[str] ) \u2014 Columns that are Unique unique_together ( list[tuple] ) \u2014 Group of Columns that are Unique Together ignore ( list[str] ) \u2014 Columns that are Virtual and not part of the database columns","title":"Database Type | Model Setup"},{"location":"#usage-example","text":"These configurations are for SQL-Database (ONLY) model-sample.py # -*- coding: utf-8 -*- \"\"\" Model-Setup-Sample \"\"\" import dbcontroller as dbc # Model sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) @sql . model ( table_name = \"custom_table_name\" , primary_key = [ \"col_one\" ], required = [ \"col_one\" ], index = [ \"col_one\" ], unique = [ \"col_one\" ], unique_together = [( \"col_one\" , \"col_two\" )], ignore = [ \"col_three\" ], ) class Product : name : str","title":"Usage Example"},{"location":"notebook/","text":"Notebook (DBC) PIP Install Install python -m pip install notebook \"dbcontroller[testing]\" Run python -m jupyter notebook PDM Install Install pdm add notebook \"dbcontroller[testing]\" Run pdm run jupyter notebook Initialize import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) Database Controller @sql . model ( table_name = \"users\" ) class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False Load Classes ( Manager ) # Init Objects dbc . load ([ User ]) SQLAlchemy from sqlalchemy import create_engine # Init Table (SQLAlchemy) engine = create_engine ( sql . url , echo = True ) sql . base . metadata . create_all ( engine ) Demo Create await User . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) Get-All await User . all ()","title":"(Demo) Notebook"},{"location":"notebook/#notebook-dbc","text":"","title":"Notebook (DBC)"},{"location":"notebook/#pip-install","text":"Install python -m pip install notebook \"dbcontroller[testing]\" Run python -m jupyter notebook","title":"PIP Install"},{"location":"notebook/#pdm-install","text":"Install pdm add notebook \"dbcontroller[testing]\" Run pdm run jupyter notebook","title":"PDM Install"},{"location":"notebook/#initialize","text":"import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" )","title":"Initialize"},{"location":"notebook/#database-controller","text":"@sql . model ( table_name = \"users\" ) class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False","title":"Database Controller"},{"location":"notebook/#load-classes-manager","text":"# Init Objects dbc . load ([ User ])","title":"Load Classes (Manager)"},{"location":"notebook/#sqlalchemy","text":"from sqlalchemy import create_engine # Init Table (SQLAlchemy) engine = create_engine ( sql . url , echo = True ) sql . base . metadata . create_all ( engine )","title":"SQLAlchemy"},{"location":"notebook/#demo","text":"","title":"Demo"},{"location":"notebook/#create","text":"await User . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }])","title":"Create"},{"location":"notebook/#get-all","text":"await User . all ()","title":"Get-All"},{"location":"scalars/","text":"Fields that translate from a particular type between Python , SQL and GraphQL data. Model Fields GraphQL Python (dbcontroller) SQLAlchemy ID dbcontroller.ID Integer String str String(length=255) String dbcontroller.text Text Integer int Integer Float float Float Boolean bool Boolean Datetime datetime.datetime DateTime Date datetime.date Date Time datetime.time Time Decimal dbcontroller.decimal String(length=255) JSON dbcontroller.json JSON Your instance includes two fields _id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier. Usage Example Step 1 Basic Tools # -*- coding: utf-8 -*- \"\"\" Type | Model \"\"\" import dbcontroller as dbc from typing import Optional sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) mongo = dbc . Controller ( mongo = \"mongodb://localhost:27017/example\" ) # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time () Step 2 Create Model(s) @sql . model class Product : # Core { Python } name : str | None = None aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None # Custom Scalars { GraphQL } created_on : dbc . datetime = dbc . field ( Date . datetime ) available_from : dbc . date = dbc . field ( Date . date ) same_day_shipping_before : dbc . time = dbc . field ( Date . time ) price : dbc . decimal | None = None notes : list [ dbc . text ] = dbc . field ( list ) is_object : dbc . json = dbc . field ( dict ) # Other { Type | Model } category : Optional [ \"Category\" ] = None # Other { Type | Model } async def group ( self ) -> Optional [ \"Group\" ]: \"\"\"Group Type\"\"\" return Group ( name = \"awesome\" ) @sql . model class Category : name : str @mongo . model class Group : name : str Step 3 ( SQL Only) Create Database's Table from sqlalchemy import create_engine engine = create_engine ( sql . url , echo = True ) sql . base . metadata . create_all ( engine )","title":"Scalars/Fields/Columns"},{"location":"scalars/#model-fields","text":"GraphQL Python (dbcontroller) SQLAlchemy ID dbcontroller.ID Integer String str String(length=255) String dbcontroller.text Text Integer int Integer Float float Float Boolean bool Boolean Datetime datetime.datetime DateTime Date datetime.date Date Time datetime.time Time Decimal dbcontroller.decimal String(length=255) JSON dbcontroller.json JSON","title":"Model Fields"},{"location":"scalars/#your-instance-includes-two-fields","text":"_id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier.","title":"Your instance includes two fields"},{"location":"scalars/#usage-example","text":"","title":"Usage Example"},{"location":"scalars/#step-1","text":"Basic Tools # -*- coding: utf-8 -*- \"\"\" Type | Model \"\"\" import dbcontroller as dbc from typing import Optional sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) mongo = dbc . Controller ( mongo = \"mongodb://localhost:27017/example\" ) # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time ()","title":"Step 1"},{"location":"scalars/#step-2","text":"Create Model(s) @sql . model class Product : # Core { Python } name : str | None = None aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None # Custom Scalars { GraphQL } created_on : dbc . datetime = dbc . field ( Date . datetime ) available_from : dbc . date = dbc . field ( Date . date ) same_day_shipping_before : dbc . time = dbc . field ( Date . time ) price : dbc . decimal | None = None notes : list [ dbc . text ] = dbc . field ( list ) is_object : dbc . json = dbc . field ( dict ) # Other { Type | Model } category : Optional [ \"Category\" ] = None # Other { Type | Model } async def group ( self ) -> Optional [ \"Group\" ]: \"\"\"Group Type\"\"\" return Group ( name = \"awesome\" ) @sql . model class Category : name : str @mongo . model class Group : name : str","title":"Step 2"},{"location":"scalars/#step-3-sql-only","text":"Create Database's Table from sqlalchemy import create_engine engine = create_engine ( sql . url , echo = True ) sql . base . metadata . create_all ( engine )","title":"Step 3 (SQL Only)"},{"location":"database/manager/","text":"Usage The Manager is the interface for creating database operations . It gives functionality at the \u201c Table - Level \u201d. Setup Create the Model/Type aka: Database \" Table \" types.py import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) @sql . model class User : name : str Create the Manager manager.py import dbcontroller as dbc from . import types # (Reusable) \u2014 Base Manager class Base : @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) # (Model | Type) \u2014 Manager @dbc . manager class User ( Base ): model = types . User @classmethod async def create ( cls , form ): results = await cls . objects . create ( { \"name\" : form . name , } ) return results Testing ( Usage ) Test the Manager example.py from .manager import User await User . reset_table ()","title":"Manager"},{"location":"database/manager/#setup","text":"Create the Model/Type aka: Database \" Table \" types.py import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) @sql . model class User : name : str Create the Manager manager.py import dbcontroller as dbc from . import types # (Reusable) \u2014 Base Manager class Base : @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) # (Model | Type) \u2014 Manager @dbc . manager class User ( Base ): model = types . User @classmethod async def create ( cls , form ): results = await cls . objects . create ( { \"name\" : form . name , } ) return results","title":"Setup"},{"location":"database/manager/#testing-usage","text":"Test the Manager example.py from .manager import User await User . reset_table ()","title":"Testing (Usage)"},{"location":"database/mongo/","text":"SQL (Alchemy) Type Database Collection = GraphQL Type Collection | Model | Type import dbcontroller as dbc mongo = dbc . Controller ( mongo = \"mongodb://localhost:27017/example\" ) # Types @mongo . model class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False Manager table = User . objects C.U.D \u2014 Examples Create Update Delete form = { \"name\" : \"joe doe\" , } # Create One results = await table . create ( form ) # Create Many results = await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } # Update One or Many results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ]) Reading | Querying ( One -Record) Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query ) Reading | Querying ( Multiple -Records) All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Mongo"},{"location":"database/mongo/#sql-alchemy","text":"Type Database Collection = GraphQL Type","title":"SQL (Alchemy)"},{"location":"database/mongo/#collection-model-type","text":"import dbcontroller as dbc mongo = dbc . Controller ( mongo = \"mongodb://localhost:27017/example\" ) # Types @mongo . model class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False","title":"Collection | Model | Type"},{"location":"database/mongo/#manager","text":"table = User . objects","title":"Manager"},{"location":"database/mongo/#cud-examples","text":"Create Update Delete form = { \"name\" : \"joe doe\" , } # Create One results = await table . create ( form ) # Create Many results = await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } # Update One or Many results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ])","title":"C.U.D \u2014 Examples"},{"location":"database/mongo/#reading-querying-one-record","text":"Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query )","title":"Reading | Querying (One-Record)"},{"location":"database/mongo/#reading-querying-multiple-records","text":"All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Reading | Querying (Multiple-Records)"},{"location":"database/sql/","text":"SQL (Alchemy) Type Database Table = GraphQL Type Table | Model | Type import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) # Types @sql . model class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False Manager table = User . objects C.U.D \u2014 Examples Create Update Delete form = { \"name\" : \"joe doe\" , } # Create One results = await table . create ( form ) # Create Many results = await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } # Update One or Many results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ]) Reading | Querying ( One -Record) Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query ) Reading | Querying ( Multiple -Records) All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"SQL"},{"location":"database/sql/#sql-alchemy","text":"Type Database Table = GraphQL Type","title":"SQL (Alchemy)"},{"location":"database/sql/#table-model-type","text":"import dbcontroller as dbc sql = dbc . Controller ( sql = \"sqlite:///example.db\" ) # Types @sql . model class User : name : str notes : dbc . text meta : dbc . json disabled : bool = False","title":"Table | Model | Type"},{"location":"database/sql/#manager","text":"table = User . objects","title":"Manager"},{"location":"database/sql/#cud-examples","text":"Create Update Delete form = { \"name\" : \"joe doe\" , } # Create One results = await table . create ( form ) # Create Many results = await table . create ([{ \"name\" : \"joe doe\" }, { \"name\" : \"jane doll\" }]) selector = \"Encoded-ID\" # [\"Some-ID-1\", \"Some-ID-2\", \"More-IDS...\"] form = { \"name\" : \"jane doll\" , } # Update One or Many results = await table . update ( selector , form ) # Delete One results = await table . delete ( \"Encoded-ID\" ) # Delete Many results = await table . delete ([ \"Encoded-ID-1\" , \"Encoded-ID-2\" , \"More-IDS...\" ])","title":"C.U.D \u2014 Examples"},{"location":"database/sql/#reading-querying-one-record","text":"Detail Get-By Find-One results = await table . detail ( \"Encoded-ID\" ) results = await table . get_by ( id = 1 ) query = table . where ( \"name\" , \"contains\" , \"joe\" ) results = await table . find_one ( query )","title":"Reading | Querying (One-Record)"},{"location":"database/sql/#reading-querying-multiple-records","text":"All Find Filter-By Search results = await table . all () query = ( table . where ( \"name\" , \"contains\" , \"jane\" ) | table . where ( \"name\" , \"contains\" , \"joe\" ) ) results = await table . find ( query , page = 1 , limit = 100 , sort_by = \"-id\" ) query = { \"name\" : \"joe doe\" } results = await table . filter_by ( search = query , page = 1 , limit = 100 , sort_by = \"-id\" ) search_value = \"j\" columns = [ \"name\" , \"notes\" ] results = await table . search ( columns = columns , value = search_value , page = 1 , limit = 100 , sort_by = \"-id\" )","title":"Reading | Querying (Multiple-Records)"},{"location":"extras/id-decoder/","text":"ID- Decoder table table is short for Model.objects table . id_decode ( 'ID-Custom-Base64-Encoded' )","title":"ID-Decode"},{"location":"extras/id-decoder/#id-decoder","text":"table table is short for Model.objects table . id_decode ( 'ID-Custom-Base64-Encoded' )","title":"ID-Decoder"},{"location":"extras/load/","text":"Load The Load method. Is to initiate the objects . By default the objects do not get initialized. The reason being that if you have (2) two tables that connect with each other. The reference can break if both of them are not initialized. Therefore, we want to initiate them all at the same time . dbcontroller . load ([ ModelOne , ModelTwo ])","title":"Load"},{"location":"extras/sql-q/","text":"SQL ( Q ) table table is short for Model.objects Methods Querying Simplified SQL Querying Where table . Q . where ( \"id\" , \"in\" , [ 1 , 2 , 3 ]) Filter-By WHERE id = 1 AND name = \"spongebob\" AND last_name = \"squarepants\" table . Q . filter_by ( id = 1 , name = \"spongebob\" , last_name = \"squarepants\" ) Search WHERE name = \"bob\" OR name = \"bob\" table . Q . search ([ \"name\" , \"nickname\" ], \"bob\" ) Compile Compiling Compiling the Query. Normal ( Select ) # Query query = table . Q . search ([ \"name\" , \"title\" ], \"bob\" ) # Compile table . Q . select ( query ) Pagination ( Find ) # Query query = table . Q . filter_by ( name = \"bob\" ) # Compile table . Q . find ( query , # The Query page = 1 , # Current Page limit = 100 , # Items Per Page sort_by = '-id' # Sort-By \"X\" Column )","title":"SQL ( Q )"},{"location":"extras/sql-q/#sql-q","text":"table table is short for Model.objects","title":"SQL ( Q )"},{"location":"extras/sql-q/#methods","text":"Querying Simplified SQL Querying","title":"Methods"},{"location":"extras/sql-q/#where","text":"table . Q . where ( \"id\" , \"in\" , [ 1 , 2 , 3 ])","title":"Where"},{"location":"extras/sql-q/#filter-by","text":"WHERE id = 1 AND name = \"spongebob\" AND last_name = \"squarepants\" table . Q . filter_by ( id = 1 , name = \"spongebob\" , last_name = \"squarepants\" )","title":"Filter-By"},{"location":"extras/sql-q/#search","text":"WHERE name = \"bob\" OR name = \"bob\" table . Q . search ([ \"name\" , \"nickname\" ], \"bob\" )","title":"Search"},{"location":"extras/sql-q/#compile","text":"Compiling Compiling the Query.","title":"Compile"},{"location":"extras/sql-q/#normal-select","text":"# Query query = table . Q . search ([ \"name\" , \"title\" ], \"bob\" ) # Compile table . Q . select ( query )","title":"Normal (Select)"},{"location":"extras/sql-q/#pagination-find","text":"# Query query = table . Q . filter_by ( name = \"bob\" ) # Compile table . Q . find ( query , # The Query page = 1 , # Current Page limit = 100 , # Items Per Page sort_by = '-id' # Sort-By \"X\" Column )","title":"Pagination (Find)"},{"location":"extras/sql-where/","text":"SQL Where ( Operators ) table table is short for Model.objects Usage : table.where(str: \"column\", str: \"method\", Any: value) Method Check Column (IF) eq Equals lt Less than le Less than or Equal than gt Greater than ge Greater than or Equal than contains Custom Text Search (Ignore-Case) like Text Search \"%\" (Case-Sensitive) ilike Text Search \"%\" (Ignore-Case) in In List bt Between \"A & B\" API - Demo table . where ( \"column\" , \"operator\" , \"value\" ) Example You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \" # Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" ) SQLAlchemy Style You can use just the regular SQLAlchemy operators instead. # Name Equals Joe table . c . name == \"joe\"","title":"SQL Where"},{"location":"extras/sql-where/#sql-where-operators","text":"table table is short for Model.objects Usage : table.where(str: \"column\", str: \"method\", Any: value) Method Check Column (IF) eq Equals lt Less than le Less than or Equal than gt Greater than ge Greater than or Equal than contains Custom Text Search (Ignore-Case) like Text Search \"%\" (Case-Sensitive) ilike Text Search \"%\" (Ignore-Case) in In List bt Between \"A & B\"","title":"SQL Where ( Operators )"},{"location":"extras/sql-where/#api-demo","text":"table . where ( \"column\" , \"operator\" , \"value\" )","title":"API - Demo"},{"location":"extras/sql-where/#example","text":"You can add an exclamation point \" ! \" at the beginning of the operator to make it a \" not \" # Name Equals Joe table . where ( \"name\" , \"eq\" , \"joe\" ) # Name Not Equals Joe table . where ( \"name\" , \"!eq\" , \"joe\" )","title":"Example"},{"location":"extras/sql-where/#sqlalchemy-style","text":"You can use just the regular SQLAlchemy operators instead. # Name Equals Joe table . c . name == \"joe\"","title":"SQLAlchemy Style"}]}